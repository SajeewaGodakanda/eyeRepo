{"ast":null,"code":"var _jsxFileName = \"C:\\\\New folder (9)\\\\Diabetic-Retinopathy-Detection-main\\\\Final Hosted Web\\\\DockerRepo-RP-main\\\\src\\\\views\\\\charts\\\\BarChartForStatus.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BarChartForStatusComponent = ({\n  data\n}) => {\n  _s();\n  const chartRef = useRef(null);\n  useEffect(() => {\n    if (data.length === 0) return;\n    const ctx = chartRef.current.getContext('2d');\n\n    // Count occurrences of each \"status\" value\n    const counts = {\n      decline: 0,\n      accept: 0,\n      pending: 0\n    };\n    data.forEach(item => {\n      const status = item.status;\n      counts[status] = (counts[status] || 0) + 1;\n    });\n    const statusLabels = Object.keys(counts);\n    const statusCounts = Object.values(counts);\n    const dataForChart = {\n      labels: statusLabels,\n      datasets: [{\n        label: 'Status Count',\n        data: statusCounts,\n        backgroundColor: ['rgba(255, 99, 132, 0.7)', 'rgba(54, 162, 235, 0.7)', 'rgba(255, 206, 86, 0.7)']\n      }]\n    };\n    const myChart = new Chart(ctx, {\n      type: 'bar',\n      data: dataForChart,\n      options: {\n        plugins: {\n          legend: {\n            display: false // Hide the legend at the top of the chart\n          }\n        }\n      }\n    });\n    return () => {\n      // Cleanup chart when the component unmounts\n      myChart.destroy();\n    };\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: chartRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(BarChartForStatusComponent, \"X+1SfQQ6xefXNU27aQW843M7cTw=\");\n_c = BarChartForStatusComponent;\nexport default BarChartForStatusComponent;\nvar _c;\n$RefreshReg$(_c, \"BarChartForStatusComponent\");","map":{"version":3,"names":["React","useEffect","useRef","Chart","jsxDEV","_jsxDEV","BarChartForStatusComponent","data","_s","chartRef","length","ctx","current","getContext","counts","decline","accept","pending","forEach","item","status","statusLabels","Object","keys","statusCounts","values","dataForChart","labels","datasets","label","backgroundColor","myChart","type","options","plugins","legend","display","destroy","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/New folder (9)/Diabetic-Retinopathy-Detection-main/Final Hosted Web/DockerRepo-RP-main/src/views/charts/BarChartForStatus.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport Chart from 'chart.js/auto';\n\nconst BarChartForStatusComponent = ({ data }) => {\n    const chartRef = useRef(null);\n\n  useEffect(() => {\n    if (data.length === 0) return;\n\n    const ctx = chartRef.current.getContext('2d');\n\n    // Count occurrences of each \"status\" value\n    const counts = {\n      decline: 0,\n      accept: 0,\n      pending: 0,\n    };\n\n    data.forEach(item => {\n      const status = item.status;\n      counts[status] = (counts[status] || 0) + 1;\n    });\n\n    const statusLabels = Object.keys(counts);\n    const statusCounts = Object.values(counts);\n\n    const dataForChart = {\n      labels: statusLabels,\n      datasets: [\n        {\n          label: 'Status Count',\n          data: statusCounts,\n          backgroundColor: [\n            'rgba(255, 99, 132, 0.7)',\n            'rgba(54, 162, 235, 0.7)',\n            'rgba(255, 206, 86, 0.7)',\n          ],\n        },\n      ],\n    };\n\n    const myChart = new Chart(ctx, {\n      type: 'bar',\n      data: dataForChart,\n      options: {\n        plugins: {\n          legend: {\n            display: false, // Hide the legend at the top of the chart\n          },\n        },\n      },\n    });\n\n    return () => {\n      // Cleanup chart when the component unmounts\n      myChart.destroy();\n    };\n  }, [data]);\n\n  return (\n    <div>\n      <canvas ref={chartRef} />\n    </div>\n  );\n};\nexport default BarChartForStatusComponent;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAOC,KAAK,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,0BAA0B,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAC7C,MAAMC,QAAQ,GAAGP,MAAM,CAAC,IAAI,CAAC;EAE/BD,SAAS,CAAC,MAAM;IACd,IAAIM,IAAI,CAACG,MAAM,KAAK,CAAC,EAAE;IAEvB,MAAMC,GAAG,GAAGF,QAAQ,CAACG,OAAO,CAACC,UAAU,CAAC,IAAI,CAAC;;IAE7C;IACA,MAAMC,MAAM,GAAG;MACbC,OAAO,EAAE,CAAC;MACVC,MAAM,EAAE,CAAC;MACTC,OAAO,EAAE;IACX,CAAC;IAEDV,IAAI,CAACW,OAAO,CAACC,IAAI,IAAI;MACnB,MAAMC,MAAM,GAAGD,IAAI,CAACC,MAAM;MAC1BN,MAAM,CAACM,MAAM,CAAC,GAAG,CAACN,MAAM,CAACM,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;IAC5C,CAAC,CAAC;IAEF,MAAMC,YAAY,GAAGC,MAAM,CAACC,IAAI,CAACT,MAAM,CAAC;IACxC,MAAMU,YAAY,GAAGF,MAAM,CAACG,MAAM,CAACX,MAAM,CAAC;IAE1C,MAAMY,YAAY,GAAG;MACnBC,MAAM,EAAEN,YAAY;MACpBO,QAAQ,EAAE,CACR;QACEC,KAAK,EAAE,cAAc;QACrBtB,IAAI,EAAEiB,YAAY;QAClBM,eAAe,EAAE,CACf,yBAAyB,EACzB,yBAAyB,EACzB,yBAAyB;MAE7B,CAAC;IAEL,CAAC;IAED,MAAMC,OAAO,GAAG,IAAI5B,KAAK,CAACQ,GAAG,EAAE;MAC7BqB,IAAI,EAAE,KAAK;MACXzB,IAAI,EAAEmB,YAAY;MAClBO,OAAO,EAAE;QACPC,OAAO,EAAE;UACPC,MAAM,EAAE;YACNC,OAAO,EAAE,KAAK,CAAE;UAClB;QACF;MACF;IACF,CAAC,CAAC;IAEF,OAAO,MAAM;MACX;MACAL,OAAO,CAACM,OAAO,CAAC,CAAC;IACnB,CAAC;EACH,CAAC,EAAE,CAAC9B,IAAI,CAAC,CAAC;EAEV,oBACEF,OAAA;IAAAiC,QAAA,eACEjC,OAAA;MAAQkC,GAAG,EAAE9B;IAAS;MAAA+B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtB,CAAC;AAEV,CAAC;AAACnC,EAAA,CA7DIF,0BAA0B;AAAAsC,EAAA,GAA1BtC,0BAA0B;AA8DhC,eAAeA,0BAA0B;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}